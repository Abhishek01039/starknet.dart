// Autogenerated from Pigeon (v9.0.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif



private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

/// Generated class from Pigeon that represents data sent in messages.
struct AndroidPromptInfos {
  var title: String
  var subtitle: String? = nil
  var description: String? = nil
  var cancelLabel: String
  var confirmationRequired: Bool

  static func fromList(_ list: [Any]) -> AndroidPromptInfos? {
    let title = list[0] as! String
    let subtitle = list[1] as! String? 
    let description = list[2] as! String? 
    let cancelLabel = list[3] as! String
    let confirmationRequired = list[4] as! Bool

    return AndroidPromptInfos(
      title: title,
      subtitle: subtitle,
      description: description,
      cancelLabel: cancelLabel,
      confirmationRequired: confirmationRequired
    )
  }
  func toList() -> [Any?] {
    return [
      title,
      subtitle,
      description,
      cancelLabel,
      confirmationRequired,
    ]
  }
}

/// Android-specific options for biometric authentication.
///
/// Generated class from Pigeon that represents data sent in messages.
struct AndroidOptions {
  /// Details of the prompt to show to the user.
  var promptInfo: AndroidPromptInfos? = nil
  /// The duration in seconds for which the authentication is valid. If the
  /// user sets it to -1 (default), user must authenticate each time they want
  /// to get or set a secret.
  var authenticationValidityDurationSeconds: Int32
  /// Whether to use the StrongBox hardware-backed keystore.
  /// This feature seems to cause [crashes](https://github.com/authpass/biometric_storage/issues/76),
  /// enable with caution.
  var enableStrongBox: Bool

  static func fromList(_ list: [Any]) -> AndroidOptions? {
    var promptInfo: AndroidPromptInfos? = nil
    if let promptInfoList = list[0] as! [Any]? {
      promptInfo = AndroidPromptInfos.fromList(promptInfoList as [Any])
    }
    let authenticationValidityDurationSeconds = list[1] as! Int32
    let enableStrongBox = list[2] as! Bool

    return AndroidOptions(
      promptInfo: promptInfo,
      authenticationValidityDurationSeconds: authenticationValidityDurationSeconds,
      enableStrongBox: enableStrongBox
    )
  }
  func toList() -> [Any?] {
    return [
      promptInfo?.toList(),
      authenticationValidityDurationSeconds,
      enableStrongBox,
    ]
  }
}

/// Platform-specific options for biometric authentication.
///
/// Generated class from Pigeon that represents data sent in messages.
struct BiometricOptions {
  /// Android-specific options.
  var androidOptions: AndroidOptions? = nil

  static func fromList(_ list: [Any]) -> BiometricOptions? {
    var androidOptions: AndroidOptions? = nil
    if let androidOptionsList = list[0] as! [Any]? {
      androidOptions = AndroidOptions.fromList(androidOptionsList as [Any])
    }

    return BiometricOptions(
      androidOptions: androidOptions
    )
  }
  func toList() -> [Any?] {
    return [
      androidOptions?.toList(),
    ]
  }
}

private class SecureStoreInterfaceCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return AndroidOptions.fromList(self.readValue() as! [Any])
      case 129:
        return AndroidPromptInfos.fromList(self.readValue() as! [Any])
      case 130:
        return BiometricOptions.fromList(self.readValue() as! [Any])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class SecureStoreInterfaceCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? AndroidOptions {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? AndroidPromptInfos {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? BiometricOptions {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class SecureStoreInterfaceCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return SecureStoreInterfaceCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return SecureStoreInterfaceCodecWriter(data: data)
  }
}

class SecureStoreInterfaceCodec: FlutterStandardMessageCodec {
  static let shared = SecureStoreInterfaceCodec(readerWriter: SecureStoreInterfaceCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol SecureStoreInterface {
  func storeSecret(key: String, privateKey: FlutterStandardTypedData, biometricOptions: BiometricOptions?, completion: @escaping (Result<Void, Error>) -> Void)
  func removeSecret(key: String, completion: @escaping (Result<Void, Error>) -> Void)
  func getSecret(key: String, biometricOptions: BiometricOptions?, completion: @escaping (Result<FlutterStandardTypedData?, Error>) -> Void)
  func biometryAvailable() throws -> Bool
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class SecureStoreInterfaceSetup {
  /// The codec used by SecureStoreInterface.
  static var codec: FlutterStandardMessageCodec { SecureStoreInterfaceCodec.shared }
  /// Sets up an instance of `SecureStoreInterface` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: SecureStoreInterface?) {
    let storeSecretChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.SecureStoreInterface.storeSecret", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      storeSecretChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let keyArg = args[0] as! String
        let privateKeyArg = args[1] as! FlutterStandardTypedData
        let biometricOptionsArg = args[2] as? BiometricOptions
        api.storeSecret(key: keyArg, privateKey: privateKeyArg, biometricOptions: biometricOptionsArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      storeSecretChannel.setMessageHandler(nil)
    }
    let removeSecretChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.SecureStoreInterface.removeSecret", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      removeSecretChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let keyArg = args[0] as! String
        api.removeSecret(key: keyArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      removeSecretChannel.setMessageHandler(nil)
    }
    let getSecretChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.SecureStoreInterface.getSecret", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getSecretChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let keyArg = args[0] as! String
        let biometricOptionsArg = args[1] as? BiometricOptions
        api.getSecret(key: keyArg, biometricOptions: biometricOptionsArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getSecretChannel.setMessageHandler(nil)
    }
    let biometryAvailableChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.SecureStoreInterface.biometryAvailable", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      biometryAvailableChannel.setMessageHandler { _, reply in
        do {
          let result = try api.biometryAvailable()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      biometryAvailableChannel.setMessageHandler(nil)
    }
  }
}
